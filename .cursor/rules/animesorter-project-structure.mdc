---
description: 
globs: 
alwaysApply: false
---
# AnimeSorter 프로젝트 구조 및 아키텍처 규칙

## 기본 프로젝트 구조
```
animesorter/
├── main.py                    # 애플리케이션 진입점
├── src/
│   ├── app.py                 # 핵심 로직 및 모듈 통합 (AnimeSorter 클래스)
│   ├── file_cleaner.py        # 파일명 정제 로직
│   ├── cache_db.py            # SQLite 기반 캐시 관리
│   ├── file_manager.py        # 파일 스캔, 폴더 생성, 파일 이동 로직
│   ├── config.py              # 설정 관리
│   ├── logger.py              # 로깅 설정
│   ├── utils.py               # 공통 유틸리티
│   ├── exceptions.py          # 사용자 정의 예외
│   ├── ui/
│   │   ├── main_window.py     # 메인 UI 창
│   │   ├── settings_dialog.py # 설정 대화상자
│   │   └── worker.py          # 백그라운드 작업 처리
│   └── plugin/
│       ├── base.py            # 메타데이터 제공자 인터페이스
│       └── tmdb/              # TMDB 플러그인
│           ├── provider.py    # TMDB 메타데이터 제공자
│           ├── api/
│           │   ├── client.py  # TMDB API 클라이언트
│           │   └── endpoints.py # TMDB API 엔드포인트
│           └── models/        # TMDB 응답 데이터 모델
├── tests/                     # 단위/통합 테스트
└── docs/                      # 문서
```

## 모듈 책임 분리 원칙
- 각 모듈은 단일 책임 원칙(SRP)을 따라야 합니다.
- `file_cleaner.py` - 파일명 정제만 담당
- `cache_db.py` - 캐시 관리만 담당
- `file_manager.py` - 파일 시스템 작업만 담당
- `plugin/*.py` - 메타데이터 제공만 담당

## 인터페이스 설계
- 모든 플러그인은 `plugin/base.py`의 인터페이스를 구현해야 합니다.
- 추상 기본 클래스(ABC)를 사용하여 인터페이스 정의:
```python
from abc import ABC, abstractmethod

class MetadataProvider(ABC):
    @abstractmethod
    async def search(self, title: str, year: Optional[int] = None) -> Optional[dict]:
        """제목과 연도로 메타데이터 검색"""
        pass
        
    @abstractmethod
    async def get_details(self, media_id: Any, media_type: str) -> Optional[dict]:
        """ID와 타입으로 상세 정보 조회"""
        pass
```

## 확장성 설계
- 플러그인 시스템을 통해 메타데이터 소스 확장 가능
- 설정 시스템을 통해 동작 커스터마이즈 가능
- 미래 확장을 고려한 인터페이스 설계

## 의존성 주입 패턴
- 클래스는 의존성을 생성자를 통해 주입받아야 합니다.
- 하드코딩된 인스턴스 생성 대신 의존성 주입 사용:
```python
# 좋음
class AnimeSorter:
    def __init__(self, file_cleaner, metadata_provider, file_manager):
        self.file_cleaner = file_cleaner
        self.metadata_provider = metadata_provider
        self.file_manager = file_manager

# 나쁨
class AnimeSorter:
    def __init__(self):
        self.file_cleaner = FileCleaner()
        self.metadata_provider = TMDBProvider()
        self.file_manager = FileManager()
```

## 설정 관리
- 모든 설정은 `config.yaml` 파일에서 관리
- 하드코딩된 값 대신 설정 파일 참조
- 기본값과 사용자 설정 병합 메커니즘 구현

## 애플리케이션 흐름
```
UI → 파일 스캔 → (파일명 정제 → 캐시 확인 → API 검색 → 캐시 저장) → 폴더 경로 결정 → 파일 이동 → UI 업데이트
```

## 코드 스타일 가이드
- [PEP 8](mdc:https:/pep8.org) 스타일 가이드 준수
- 일관된 명명 규칙:
  - 클래스: PascalCase (예: `FileManager`)
  - 함수/변수: snake_case (예: `clean_filename`)
  - 상수: UPPER_CASE (예: `DEFAULT_TIMEOUT`)
- 의미 있는 변수/함수 이름 사용
- 복잡한 로직에 주석 추가 