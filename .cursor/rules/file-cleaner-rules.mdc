---
description: 
globs: 
alwaysApply: true
---
# AnimeSorter 파일명 정제 모듈 규칙

## 목적
파일명 정제 모듈(`file_cleaner.py`)은 애니메이션 파일명에서 메타데이터 검색에 필요한 정보를 추출하는 역할을 담당합니다. 일반적으로 애니메이션 파일명은 다양한 형식과 추가 정보(릴리즈 그룹, 해상도, 코덱 등)를 포함하고 있어 정제가 필요합니다.

## 데이터 구조
```python
@dataclass
class CleanResult:
    """파일명 정제 결과를 저장하는 데이터 클래스"""
    title: str                 # 정제된 제목 (검색용)
    original_filename: str     # 원본 파일명
    season: int = 1            # 시즌 번호 (기본값: 1)
    episode: Optional[int] = None  # 에피소드 번호
    year: Optional[int] = None     # 연도
    is_movie: bool = False      # 영화 여부
    extra_info: dict = field(default_factory=dict)  # 추가 정보
```

## 주요 함수

### clean_filename()
```python
def clean_filename(filename: str | Path) -> CleanResult:
    """
    파일명을 정제하여 검색용 제목과 메타데이터를 추출
    
    Args:
        filename: 파일 경로 또는 파일명 문자열
        
    Returns:
        CleanResult: 정제된 결과 객체
    """
```

## 정규식 패턴 정의
파일명 정제에 사용할 정규식 패턴을 상수로 정의합니다:

```python
# 릴리즈 그룹 패턴 (대괄호로 둘러싸인 텍스트)
RELEASE_GROUP_PATTERN = r'\[([^\]]+)\]'

# 해상도 패턴 (720p, 1080p, 2160p 등)
RESOLUTION_PATTERN = r'\b(480p|720p|1080p|2160p|4K)\b'

# 코덱 패턴 (x264, x265, HEVC 등)
CODEC_PATTERN = r'\b(x264|x265|HEVC|AVC|FLAC|AAC)\b'

# 시즌/에피소드 패턴 (S01E01, 1x01 등 다양한 형식)
SEASON_EPISODE_PATTERNS = [
    r'S(\d{1,2})E(\d{1,2})',  # S01E01 형식
    r'(\d{1,2})x(\d{1,2})',   # 1x01 형식
    r'- (\d{1,2})(\d{2}) -',  # - 102 - 형식 (시즌 1, 에피소드 02)
    r'E(\d{1,3})',            # E01 형식 (시즌 정보 없음)
]

# 연도 패턴 (괄호 안의 4자리 연도)
YEAR_PATTERN = r'\((\d{4})\)|\[(\d{4})\]'

# 영화/특별편 키워드
MOVIE_KEYWORDS = ['movie', 'film', 'theatrical', 'ova', 'special']
```

## 파일명 정제 규칙

1. **확장자 제거**: 파일명에서 확장자(.mp4, .mkv 등)를 제거합니다.

2. **릴리즈 그룹 제거**: 대괄호로 둘러싸인 릴리즈 그룹 정보를 제거합니다.
   ```
   [SubsPlease] Anime Title -> Anime Title
   ```

3. **해상도/코덱 정보 제거**: 720p, 1080p, x264 등의 기술적 정보를 제거합니다.
   ```
   Anime Title 1080p x264 -> Anime Title
   ```

4. **시즌/에피소드 정보 추출**: 다양한 형식의 시즌/에피소드 표기를 인식하고 추출합니다.
   ```
   Anime Title S01E05 -> title="Anime Title", season=1, episode=5
   Anime Title - 0205 -> title="Anime Title", season=2, episode=5
   ```

5. **연도 추출**: 파일명에 포함된 연도 정보를 추출합니다.
   ```
   Anime Title (2022) -> title="Anime Title", year=2022
   ```

6. **영화 여부 판단**: 특정 키워드를 통해 영화/특별편 여부를 판단합니다.
   ```
   Anime Title Movie -> title="Anime Title", is_movie=True
   ```

7. **불필요한 구두점/공백 정리**: 정제 과정에서 발생한 연속된 공백이나 구두점을 정리합니다.
   ```
   Anime  Title . -> Anime Title
   ```

## 예외 처리
- 파싱 실패 시 원본 파일명을 title로 사용하고 로그에 경고를 기록합니다.
- 정규식 오류 또는 기타 예외가 발생해도 프로그램이 중단되지 않도록 처리합니다.

## 테스트 케이스
다음과 같은 다양한 형식의 파일명에 대한 테스트 케이스를 작성해야 합니다:

```python
def test_standard_anime_format():
    result = clean_filename("[SubsPlease] Anime Title - 01 [1080p].mkv")
    assert result.title == "Anime Title"
    assert result.season == 1
    assert result.episode == 1
    assert not result.is_movie

def test_season_episode_format():
    result = clean_filename("Anime Title S02E05 [1080p].mkv")
    assert result.title == "Anime Title"
    assert result.season == 2
    assert result.episode == 5

def test_movie_format():
    result = clean_filename("Anime Title Movie (2022) [1080p].mkv")
    assert result.title == "Anime Title"
    assert result.year == 2022
    assert result.is_movie