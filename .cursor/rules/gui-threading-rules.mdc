---
description: 
globs: 
alwaysApply: true
---
# AnimeSorter GUI 및 스레딩 규칙

## 목적
GUI 및 스레딩 모듈은 사용자 인터페이스를 제공하고, 파일 정제, API 요청, 파일 이동 등의 작업을 비동기적으로 처리하여 UI 반응성을 유지하는 역할을 담당합니다.

## UI 설계 원칙
- 단일 창 인터페이스 (MDI 대신 탭 또는 스택 위젯 사용)
- 작업 진행 상황 시각화 (진행 막대, 상태 메시지)
- 직관적인 사용자 경험 (드래그-앤-드롭 지원, 컨텍스트 메뉴)
- 정보 계층화 (기본 보기와 상세 보기 분리)
- 사용자 설정 저장 및 불러오기

## Qt 코딩 스타일
PyQt5/PySide2 사용 시 다음 코딩 스타일을 따릅니다:

```python
class MainWindow(QMainWindow):
    """메인 애플리케이션 창"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("AnimeSorter")
        self.setMinimumSize(800, 600)
        
        # 중앙 위젯 설정
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        
        # 레이아웃 설정
        self.main_layout = QVBoxLayout(self.central_widget)
        
        # UI 요소 초기화
        self._setup_ui()
        self._create_connections()
        
    def _setup_ui(self):
        """UI 요소 생성 및 배치"""
        # 경로 선택 영역
        self.path_group = QGroupBox("디렉토리 설정")
        path_layout = QGridLayout(self.path_group)
        
        # 소스 디렉토리
        self.source_label = QLabel("소스 폴더:")
        self.source_edit = QLineEdit()
        self.source_button = QPushButton("찾아보기...")
        
        path_layout.addWidget(self.source_label, 0, 0)
        path_layout.addWidget(self.source_edit, 0, 1)
        path_layout.addWidget(self.source_button, 0, 2)
        
        # 대상 디렉토리
        self.target_label = QLabel("대상 폴더:")
        self.target_edit = QLineEdit()
        self.target_button = QPushButton("찾아보기...")
        
        path_layout.addWidget(self.target_label, 1, 0)
        path_layout.addWidget(self.target_edit, 1, 1)
        path_layout.addWidget(self.target_button, 1, 2)
        
        # 메인 레이아웃에 추가
        self.main_layout.addWidget(self.path_group)
        
        # 나머지 UI 요소 추가...
        
    def _create_connections(self):
        """시그널-슬롯 연결"""
        self.source_button.clicked.connect(self._select_source_dir)
        self.target_button.clicked.connect(self._select_target_dir)
        # 기타 연결...
        
    def _select_source_dir(self):
        """소스 디렉토리 선택 대화상자"""
        dir_path = QFileDialog.getExistingDirectory(
            self, "소스 폴더 선택", 
            self.source_edit.text() or QDir.homePath()
        )
        if dir_path:
            self.source_edit.setText(dir_path)
```

## 백그라운드 처리 및 스레딩
PyQt5/PySide2에서 UI 응답성을 유지하기 위한 백그라운드 작업 처리 방법:

### 1. QRunnable과 QThreadPool 사용
작업자 클래스(Worker) 구현 및 스레드 풀 사용:

```python
class WorkerSignals(QObject):
    """작업자 신호 정의"""
    started = pyqtSignal()
    finished = pyqtSignal()
    progress = pyqtSignal(int, str)  # 진행률, 메시지
    error = pyqtSignal(str)
    result = pyqtSignal(object)

class FileProcessWorker(QRunnable):
    """파일 처리 작업자"""
    
    def __init__(self, files, metadata_provider, file_manager):
        super().__init__()
        self.signals = WorkerSignals()
        self.files = files
        self.metadata_provider = metadata_provider
        self.file_manager = file_manager
        self._is_running = True
        
    def run(self):
        """작업 실행 (별도 스레드에서 호출됨)"""
        self.signals.started.emit()
        
        try:
            total_files = len(self.files)
            metadata_map = {}
            
            # 1단계: 파일명 정제 및 메타데이터 검색
            for i, file_path in enumerate(self.files):
                if not self._is_running:
                    break
                    
                # 진행 상황 업데이트
                progress_pct = int((i / total_files) * 50)  # 첫 50%
                self.signals.progress.emit(progress_pct, f"파일 분석 중: {file_path.name}")
                
                # 파일명 정제
                clean_result = FileCleaner.clean_filename(file_path)
                
                # 메타데이터 검색 (동기식 호출 - asyncio 처리 필요)
                # loop = asyncio.new_event_loop()
                # metadata = loop.run_until_complete(
                #     self.metadata_provider.search(clean_result.title, clean_result.year)
                # )
                
                # 임시 (실제로는 비동기 처리 구현 필요)
                metadata = {"title": clean_result.title, "year": clean_result.year}
                
                if metadata:
                    metadata_map[file_path] = metadata
            
            # 2단계: 파일 이동
            processed_count = 0
            for i, file_path in enumerate(metadata_map.keys()):
                if not self._is_running:
                    break
                    
                # 진행 상황 업데이트
                progress_pct = 50 + int((i / len(metadata_map)) * 50)  # 후반 50%
                self.signals.progress.emit(progress_pct, f"파일 이동 중: {file_path.name}")
                
                # 파일 처리 (동기식 호출 - asyncio 처리 필요)
                # loop = asyncio.new_event_loop()
                # success = loop.run_until_complete(
                #     self.file_manager.process_file(file_path, metadata_map[file_path])
                # )
                
                # 임시 (실제로는 비동기 처리 구현 필요)
                success = True
                
                if success:
                    processed_count += 1
            
            # 결과 반환
            result = {
                "total": total_files,
                "processed": processed_count,
                "metadata_found": len(metadata_map)
            }
            self.signals.result.emit(result)
            
        except Exception as e:
            self.signals.error.emit(str(e))
        finally:
            self.signals.finished.emit()
    
    def stop(self):
        """작업 중지 요청"""
        self._is_running = False
```

메인 윈도우에서 작업자 실행:

```python
def start_processing(self):
    """파일 처리 시작"""
    # 작업자 생성
    self.worker = FileProcessWorker(
        self.file_list,
        self.metadata_provider,
        self.file_manager
    )
    
    # 시그널 연결
    self.worker.signals.started.connect(self.on_processing_started)
    self.worker.signals.progress.connect(self.update_progress)
    self.worker.signals.error.connect(self.show_error)
    self.worker.signals.result.connect(self.on_processing_completed)
    self.worker.signals.finished.connect(self.on_processing_finished)
    
    # 작업 시작
    QThreadPool.globalInstance().start(self.worker)
```

### 2. asyncio와 Qt 통합
PyQt5에서 asyncio를 사용하기 위한 통합 방법:

```python
class AioWorker(QObject):
    """asyncio 작업자"""
    
    started = pyqtSignal()
    finished = pyqtSignal()
    progress = pyqtSignal(int, str)
    error = pyqtSignal(str)
    result = pyqtSignal(object)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self._running = False
        self._future = None
        
    async def async_run(self, files, metadata_provider, file_manager):
        """비동기 작업 실행"""
        self.started.emit()
        
        try:
            total_files = len(files)
            metadata_map = {}
            
            # 1단계: 파일명 정제 및 메타데이터 검색
            for i, file_path in enumerate(files):
                if not self._running:
                    break
                    
                # 진행 상황 업데이트
                progress_pct = int((i / total_files) * 50)
                self.progress.emit(progress_pct, f"파일 분석 중: {file_path.name}")
                
                # 파일명 정제
                clean_result = FileCleaner.clean_filename(file_path)
                
                # 메타데이터 검색 (비동기)
                metadata = await metadata_provider.search(clean_result.title, clean_result.year)
                
                if metadata:
                    metadata_map[file_path] = metadata
                    
                # 작은 지연을 두어 UI 업데이트 허용
                await asyncio.sleep(0.01)
            
            # 2단계: 파일 이동
            processed_count = 0
            for i, file_path in enumerate(metadata_map.keys()):
                if not self._running:
                    break
                    
                # 진행 상황 업데이트
                progress_pct = 50 + int((i / len(metadata_map)) * 50)
                self.progress.emit(progress_pct, f"파일 이동 중: {file_path.name}")
                
                # 파일 처리 (비동기)
                success = await file_manager.process_file(file_path, metadata_map[file_path])
                
                if success:
                    processed_count += 1
                    
                # 작은 지연을 두어 UI 업데이트 허용
                await asyncio.sleep(0.01)
            
            # 결과 반환
            result = {
                "total": total_files,
                "processed": processed_count,
                "metadata_found": len(metadata_map)
            }
            self.result.emit(result)
            
        except Exception as e:
            self.error.emit(str(e))
        finally:
            self.finished.emit()
            self._running = False
    
    def start(self, files, metadata_provider, file_manager):
        """작업 시작"""
        if self._running:
            return
            
        self._running = True
        
        # 비동기 작업 시작
        loop = asyncio.get_event_loop()
        self._future = asyncio.ensure_future(
            self.async_run(files, metadata_provider, file_manager)
        )
    
    def stop(self):
        """작업 중지"""
        self._running = False
```

asyncio와 Qt 이벤트 루프 통합 헬퍼:

```python
class AioHelper:
    """asyncio와 Qt 이벤트 루프 통합"""
    
    @staticmethod
    def init():
        """초기화"""
        # Qt 이벤트 루프와 asyncio 이벤트 루프 통합
        import qasync
        
        loop = qasync.QEventLoop()
        asyncio.set_event_loop(loop)
        
        return loop
```

메인 애플리케이션에서 사용:

```python
def main():
    """애플리케이션 진입점"""
    app = QApplication(sys.argv)
    
    # asyncio 초기화
    loop = AioHelper.init()
    
    # 메인 윈도우 생성
    window = MainWindow()
    window.show()
    
    # 이벤트 루프 실행
    with loop:
        loop.run_forever()
```

## 진행 상황 보고 및 UI 업데이트

### 진행 막대 및 상태 표시
```python
def update_progress(self, percent, message):
    """진행 상황 업데이트"""
    self.progress_bar.setValue(percent)
    self.status_label.setText(message)
    
    # 로그에도 기록
    self.log_message(f"진행 ({percent}%): {message}")
```

### 작업 취소 처리
```python
def cancel_processing(self):
    """작업 취소"""
    if hasattr(self, 'worker') and self.worker:
        self.worker.stop()
        self.status_label.setText("작업을 취소하는 중...")
        self.log_message("사용자가 작업을 취소했습니다.")
```

### 로그 기록
```python
def log_message(self, message, level=logging.INFO):
    """로그 메시지 기록 및 표시"""
    # 로거에 기록
    logging.log(level, message)
    
    # UI에 표시
    timestamp = QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")
    formatted_message = f"[{timestamp}] {message}"
    self.log_text.append(formatted_message)
    
    # 자동 스크롤
    self.log_text.verticalScrollBar().setValue(
        self.log_text.verticalScrollBar().maximum()
    )
```

## 설정 대화상자
```python
class SettingsDialog(QDialog):
    """설정 대화상자"""
    
    def __init__(self, config, parent=None):
        super().__init__(parent)
        self.config = config
        self.setWindowTitle("설정")
        self.setMinimumWidth(500)
        
        self.layout = QVBoxLayout(self)
        
        # 탭 위젯
        self.tabs = QTabWidget()
        self.layout.addWidget(self.tabs)
        
        # 일반 설정 탭
        self.general_tab = QWidget()
        self.tabs.addTab(self.general_tab, "일반")
        self._setup_general_tab()
        
        # 메타데이터 설정 탭
        self.metadata_tab = QWidget()
        self.tabs.addTab(self.metadata_tab, "메타데이터")
        self._setup_metadata_tab()
        
        # 파일 처리 설정 탭
        self.file_tab = QWidget()
        self.tabs.addTab(self.file_tab, "파일 처리")
        self._setup_file_tab()
        
        # 버튼
        self.button_box = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel
        )
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)
        self.layout.addWidget(self.button_box)
        
    def _setup_general_tab(self):
        """일반 설정 UI 요소 생성"""
        layout = QFormLayout(self.general_tab)
        
        # 언어 선택
        self.language_combo = QComboBox()
        self.language_combo.addItems(["한국어", "English", "日本語", "中文"])
        layout.addRow("언어:", self.language_combo)
        
        # 로그 레벨
        self.log_level_combo = QComboBox()
        self.log_level_combo.addItems(["DEBUG", "INFO", "WARNING", "ERROR"])
        layout.addRow("로그 레벨:", self.log_level_combo)
        
        # 테마
        self.theme_combo = QComboBox()
        self.theme_combo.addItems(["시스템", "라이트", "다크"])
        layout.addRow("테마:", self.theme_combo)
        
        # 현재 설정 로드
        self.language_combo.setCurrentText(self.config.get("language", "한국어"))
        self.log_level_combo.setCurrentText(self.config.get("log_level", "INFO"))
        self.theme_combo.setCurrentText(self.config.get("theme", "시스템"))
```

## 드래그-앤-드롭 지원
```python
def setup_drag_drop(self):
    """드래그-앤-드롭 설정"""
    self.setAcceptDrops(True)
    
def dragEnterEvent(self, event):
    """드래그 진입 이벤트"""
    if event.mimeData().hasUrls():
        event.acceptProposedAction()
        
def dropEvent(self, event):
    """드롭 이벤트"""
    urls = event.mimeData().urls()
    
    for url in urls:
        path = url.toLocalFile()
        if os.path.isdir(path):
            self.source_edit.setText(path)
            break 