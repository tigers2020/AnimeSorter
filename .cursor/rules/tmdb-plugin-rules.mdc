---
description: AnimeSorter TMDB 플러그인 규칙
globs: ["**/*.py"]
alwaysApply: false
---
# AnimeSorter TMDB 플러그인 규칙

## 목적
TMDB(The Movie Database) 플러그인은 애니메이션 파일의 메타데이터를 검색하고 가져오는 역할을 담당합니다. 이 플러그인은 플러그인 인터페이스(`plugin/base.py`)를 구현하고 TMDB API와 통신하는 클라이언트 코드를 포함합니다.

## 구조
```
src/plugin/tmdb/
├── provider.py         # MetadataProvider 인터페이스 구현
├── api/
│   ├── client.py       # API 클라이언트
│   └── endpoints.py    # API 엔드포인트 정의
└── models/             # 응답 데이터 모델 (Pydantic 또는 dataclass)
```

## 기본 상수
```python
# API 기본 URL
TMDB_API_BASE_URL = "https://api.themoviedb.org/3"

# 이미지 기본 URL (설정에서 동적으로 가져올 수도 있음)
TMDB_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/"

# 이미지 크기 옵션
POSTER_SIZES = ["w92", "w154", "w185", "w342", "w500", "w780", "original"]
BACKDROP_SIZES = ["w300", "w780", "w1280", "original"]

# 기본 요청 파라미터
DEFAULT_PARAMS = {
    "language": "ko-KR",  # 기본 언어 설정
    "include_adult": "false"  # 성인 콘텐츠 제외
}
```

## API 클라이언트 (`api/client.py`)
TMDB API와 통신하는 클라이언트 클래스를 구현합니다:

```python
class TMDBClient:
    """TMDB API 클라이언트"""
    
    def __init__(self, api_key: str, language: str = "ko-KR"):
        """
        TMDBClient 초기화
        
        Args:
            api_key: TMDB API 키
            language: 응답 언어 (기본값: 한국어)
        """
        self.api_key = api_key
        self.language = language
        self.session = None
        
    async def initialize(self) -> None:
        """aiohttp 세션 초기화"""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()
            
    async def close(self) -> None:
        """세션 종료"""
        if self.session and not self.session.closed:
            await self.session.close()
            
    async def request(self, endpoint: str, params: Optional[dict] = None, method: str = "GET") -> dict:
        """
        API 요청 전송
        
        Args:
            endpoint: API 엔드포인트 (예: "/search/tv")
            params: 요청 파라미터
            method: HTTP 메서드 (기본값: GET)
            
        Returns:
            dict: API 응답 JSON
            
        Raises:
            TMDBApiError: API 요청 실패 시
        """
        await self.initialize()
        
        url = f"{TMDB_API_BASE_URL}{endpoint}"
        request_params = {
            "api_key": self.api_key,
            "language": self.language
        }
        
        if params:
            request_params.update(params)
            
        try:
            async with self.session.request(method, url, params=request_params) as response:
                data = await response.json()
                
                # 응답 상태 코드 확인
                if response.status != 200:
                    error_message = data.get("status_message", "Unknown error")
                    raise TMDBApiError(f"API error: {error_message} (Code: {response.status})")
                    
                return data
        except aiohttp.ClientError as e:
            raise TMDBApiError(f"Request failed: {str(e)}")
```

## API 엔드포인트 (`api/endpoints.py`)
자주 사용하는 TMDB API 엔드포인트에 대한 래퍼 함수를 구현합니다:

```python
class TMDBEndpoints:
    """TMDB API 엔드포인트 래퍼"""
    
    def __init__(self, client: TMDBClient):
        """
        TMDBEndpoints 초기화
        
        Args:
            client: TMDBClient 인스턴스
        """
        self.client = client
        
    async def search_multi(self, query: str, year: Optional[int] = None) -> dict:
        """
        통합 검색 (영화, TV 시리즈, 인물 등)
        
        Args:
            query: 검색어
            year: 연도 필터 (옵션)
            
        Returns:
            dict: 검색 결과
        """
        params = {"query": query}
        if year:
            params["year"] = year
            
        return await self.client.request("/search/multi", params)
        
    async def search_tv(self, query: str, year: Optional[int] = None) -> dict:
        """TV 시리즈 검색"""
        params = {"query": query}
        if year:
            params["first_air_date_year"] = year
            
        return await self.client.request("/search/tv", params)
        
    async def search_movie(self, query: str, year: Optional[int] = None) -> dict:
        """영화 검색"""
        params = {"query": query}
        if year:
            params["year"] = year
            
        return await self.client.request("/search/movie", params)
        
    async def get_tv_details(self, tv_id: int) -> dict:
        """
        TV 시리즈 상세 정보
        
        Args:
            tv_id: TV 시리즈 ID
            
        Returns:
            dict: TV 시리즈 상세 정보
        """
        params = {"append_to_response": "seasons,images"}
        return await self.client.request(f"/tv/{tv_id}", params)
        
    async def get_movie_details(self, movie_id: int) -> dict:
        """영화 상세 정보"""
        params = {"append_to_response": "images,credits"}
        return await self.client.request(f"/movie/{movie_id}", params)
        
    async def get_season_details(self, tv_id: int, season_number: int) -> dict:
        """시즌 상세 정보"""
        return await self.client.request(f"/tv/{tv_id}/season/{season_number}")
```

## 메타데이터 제공자 (`provider.py`)
`MetadataProvider` 인터페이스를 구현한 TMDB 메타데이터 제공자를 구현합니다:

```python
class TMDBProvider(MetadataProvider):
    """TMDB 메타데이터 제공자"""
    
    def __init__(self, api_key: str, cache_db: Optional[CacheDB] = None, language: str = "ko-KR"):
        """
        TMDBProvider 초기화
        
        Args:
            api_key: TMDB API 키
            cache_db: 캐시 데이터베이스 인스턴스 (옵션)
            language: 응답 언어 (기본값: 한국어)
        """
        self.client = TMDBClient(api_key, language)
        self.endpoints = TMDBEndpoints(self.client)
        self.cache_db = cache_db
        
    async def initialize(self) -> None:
        """초기화"""
        await self.client.initialize()
        if self.cache_db:
            await self.cache_db.initialize()
            
    async def close(self) -> None:
        """리소스 정리"""
        await self.client.close()
        
    async def search(self, title: str, year: Optional[int] = None) -> Optional[dict]:
        """
        제목과 연도로 메타데이터 검색
        
        Args:
            title: 검색할 제목
            year: 연도 (옵션)
            
        Returns:
            dict or None: 검색 결과 또는 None (결과 없음)
        """
        # 캐시 확인
        if self.cache_db:
            cache_key = self._generate_cache_key(title, year)
            cached_result = await self.cache_db.get_cache(cache_key)
            if cached_result:
                return cached_result
                
        # 멀티 검색 먼저 시도
        multi_results = await self.endpoints.search_multi(title, year)
        
        # 결과 필터링 및 정렬
        filtered_results = self._filter_and_sort_results(multi_results.get("results", []), title)
        
        if not filtered_results:
            return None
            
        # 가장 관련성 높은 결과 선택
        best_match = filtered_results[0]
        
        # 상세 정보 가져오기
        result = await self.get_details(best_match["id"], best_match["media_type"])
        
        # 캐시에 저장
        if result and self.cache_db:
            await self.cache_db.set_cache(cache_key, result, year)
            
        return result
        
    async def get_details(self, media_id: Any, media_type: str) -> Optional[dict]:
        """
        ID와 타입으로 상세 정보 조회
        
        Args:
            media_id: 미디어 ID
            media_type: 미디어 타입 ("tv" 또는 "movie")
            
        Returns:
            dict or None: 상세 정보 또는 None
        """
        try:
            if media_type == "tv":
                return await self.endpoints.get_tv_details(media_id)
            elif media_type == "movie":
                return await self.endpoints.get_movie_details(media_id)
            else:
                return None
        except TMDBApiError as e:
            logging.error(f"Failed to get details: {e}")
            return None
            
    def _filter_and_sort_results(self, results: List[dict], query: str) -> List[dict]:
        """
        결과 필터링 및 정렬
        
        애니메이션 관련 결과를 우선시하고 제목 유사도로 정렬
        
        Args:
            results: 검색 결과 목록
            query: 원본 검색어
            
        Returns:
            List[dict]: 필터링 및 정렬된 결과
        """
        # 지원되는 미디어 타입만 필터링
        filtered = [r for r in results if r.get("media_type") in ("tv", "movie")]
        
        # 애니메이션 장르 ID (TMDB 기준)
        ANIMATION_GENRE_ID = 16
        
        # 점수 계산 함수
        def calculate_score(item):
            base_score = 0
            
            # 제목 유사도 (0-100)
            title_field = "name" if item.get("media_type") == "tv" else "title"
            title_similarity = fuzz.ratio(query.lower(), item.get(title_field, "").lower())
            base_score += title_similarity
            
            # 애니메이션 장르 보너스 (+20)
            if ANIMATION_GENRE_ID in item.get("genre_ids", []):
                base_score += 20
                
            # 인기도 보너스 (0-10)
            popularity = min(10, item.get("popularity", 0) / 10)
            base_score += popularity
            
            return base_score
            
        # 점수로 정렬
        scored_results = [(item, calculate_score(item)) for item in filtered]
        scored_results.sort(key=lambda x: x[1], reverse=True)
        
        return [item for item, score in scored_results]
        
    def _generate_cache_key(self, title: str, year: Optional[int]) -> str:
        """캐시 키 생성"""
        normalized_title = title.lower().replace(" ", "_")
        year_part = f"_{year}" if year else "_any"
        return f"{normalized_title}{year_part}"
```

## 예외 처리
TMDB API 관련 예외를 정의합니다:

```python
class TMDBApiError(Exception):
    """TMDB API 요청 실패 예외"""
    pass
```

## 이미지 URL 생성 유틸리티
포스터, 배경 이미지 등의 URL을 생성하는 유틸리티 함수를 제공합니다:

```python
def get_poster_url(poster_path: Optional[str], size: str = "w342") -> Optional[str]:
    """
    포스터 이미지 URL 생성
    
    Args:
        poster_path: 포스터 경로 (예: "/nkayOAUBUu4mMvyNf9iHSUiPjF1.jpg")
        size: 이미지 크기 (기본값: "w342")
        
    Returns:
        str or None: 포스터 URL 또는 None
    """
    if not poster_path:
        return None
        
    if size not in POSTER_SIZES:
        size = "w342"  # 기본 크기
        
    return f"{TMDB_IMAGE_BASE_URL}{size}{poster_path}"

def get_backdrop_url(backdrop_path: Optional[str], size: str = "w780") -> Optional[str]:
    """배경 이미지 URL 생성"""
    if not backdrop_path:
        return None
        
    if size not in BACKDROP_SIZES:
        size = "w780"  # 기본 크기
        
    return f"{TMDB_IMAGE_BASE_URL}{size}{backdrop_path}"
```

## 데이터 모델 (`models/`)
TMDB API 응답 데이터를 위한 모델을 정의합니다 (Pydantic 또는 dataclass 사용):

```python
@dataclass
class TMDBMediaBase:
    """TMDB 미디어 공통 속성"""
    id: int
    media_type: str  # "tv" 또는 "movie"
    overview: str = ""
    poster_path: Optional[str] = None
    backdrop_path: Optional[str] = None
    
@dataclass
class TMDBMovie(TMDBMediaBase):
    """영화 정보"""
    title: str
    original_title: str = ""
    release_date: Optional[str] = None
    runtime: Optional[int] = None
    genres: List[dict] = field(default_factory=list)
    
@dataclass
class TMDBTVShow(TMDBMediaBase):
    """TV 시리즈 정보"""
    name: str
    original_name: str = ""
    first_air_date: Optional[str] = None
    last_air_date: Optional[str] = None
    number_of_seasons: int = 0
    number_of_episodes: int = 0
    seasons: List[dict] = field(default_factory=list)
    genres: List[dict] = field(default_factory=list)
``` 