name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10.x, 3.11.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-qt pytest-cov
        pip install ruff mypy radon xenon deptry pip-audit vulture

    - name: Set up Qt environment for headless testing
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export QT_QPA_PLATFORM=offscreen

    - name: Run Ruff linting
      run: |
        ruff check src --output-format=github

    - name: Run MyPy type checking
      run: |
        mypy src --ignore-missing-imports

    - name: Run Radon complexity analysis
      run: |
        radon cc src -a --total-average
        xenon src --max-absolute B --max-modules A --max-average A

    - name: Run security audit
      run: |
        pip-audit --desc

    - name: Run dependency analysis
      run: |
        deptry src

    - name: Check for unused code
      run: |
        vulture src --min-confidence 80

    - name: Run tests with coverage
      run: |
        xvfb-run -a python -m pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  smoke-tests:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.x

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-qt

    - name: Set up Qt environment
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export QT_QPA_PLATFORM=offscreen

    - name: Run smoke tests
      run: |
        xvfb-run -a python -m pytest tests/smoke/ -v

    - name: Run base component tests
      run: |
        xvfb-run -a python -m pytest tests/test_base_components.py -v

  code-quality-gates:
    runs-on: ubuntu-latest
    needs: [code-quality, smoke-tests]
    if: always()

    steps:
    - name: Check quality gates
      run: |
        echo "Quality Gates Summary:"
        echo "====================="

        # Check if code-quality job passed
        if [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "‚ùå Code Quality: FAILED"
          exit 1
        else
          echo "‚úÖ Code Quality: PASSED"
        fi

        # Check if smoke-tests job passed
        if [ "${{ needs.smoke-tests.result }}" != "success" ]; then
          echo "‚ùå Smoke Tests: FAILED"
          exit 1
        else
          echo "‚úÖ Smoke Tests: PASSED"
        fi

        echo "üéâ All quality gates passed!"
