[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "animesorter"
version = "0.1.0"
description = "A PyQt5 application for organizing anime files with metadata matching"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AnimeSorter Team"},
]
keywords = ["anime", "file-organization", "metadata", "pyqt5"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Desktop Environment :: File Managers",
]
requires-python = ">=3.10"
dependencies = [
    "PyQt5>=5.15.0",
    "tmdbsimple>=2.9.1",
    "anitopy>=2.1.1",
    "guessit>=3.4.3",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "PyYAML>=6.0",
    "aiohttp>=3.12.0",
    "requests>=2.32.0",
    "psutil>=7.0.0",
    "send2trash>=1.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-qt>=4.2.0",
    "pytest-cov>=4.0.0",
    "coverage[toml]>=7.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "vcrpy>=4.2.0",
]
build = [
    "pyinstaller>=5.0.0",
    "setuptools>=61.0",
    "wheel",
]

[project.urls]
Homepage = "https://github.com/your-username/animesorter"
Repository = "https://github.com/your-username/animesorter"
Issues = "https://github.com/your-username/animesorter/issues"

[project.scripts]
animesorter = "src.main:main"

# Ruff configuration
[tool.ruff]
# Target Python 3.10+
target-version = "py310"
line-length = 100
indent-width = 4

# Source directories
src = ["src", "tests"]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort (import sorting)
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "PIE",  # flake8-pie
    "SIM",  # flake8-simplify
    "RET",  # flake8-return
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function calls in argument defaults (common in PyQt5)
    "N806",   # Variable in function should be lowercase (Qt naming convention)
    "E402",   # Module level import not at top of file (needed for sys.path manipulation)
]



# Exclude directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assert statements, etc.
"tests/**/*.py" = ["PLR2004", "S101", "S603", "S607"]
# GUI files can have longer lines and naming exceptions
"src/gui/**/*.py" = ["N802", "N815"]

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["src", "animesorter"]
known-third-party = ["PyQt5", "tmdbsimple", "anitopy", "guessit", "pydantic"]
split-on-trailing-comma = true
combine-as-imports = true

[tool.ruff.lint.mccabe]
# Complexity threshold
max-complexity = 10

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.10"
show_error_codes = true
follow_imports = "normal"
warn_return_any = false  # Disable initially for gradual adoption
warn_unused_configs = true
disallow_untyped_defs = false  # Start with false, gradually enable
disallow_incomplete_defs = false
check_untyped_defs = false  # Disable initially
disallow_untyped_decorators = false
no_implicit_optional = false  # Allow implicit Optional for now
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
# plugins = ["pydantic.mypy"]  # Pydantic v2 Mypy plugin - not available in current environment


# Ignore missing imports for external libraries
[[tool.mypy.overrides]]
module = [
    "PyQt5.*",
    "tmdbsimple.*",
    "anitopy.*",
    "guessit.*",
    "requests.*",
    "send2trash.*",
    "psutil.*",
]
ignore_missing_imports = true

# Be more lenient with GUI code initially
[[tool.mypy.overrides]]
module = [
    "src.gui.*",
    "src.plugins.*",
]
ignore_errors = true

# Core modules should have better types gradually
[[tool.mypy.overrides]]
module = [
    "src.core.*",
]
warn_return_any = false
disallow_untyped_defs = false

# DI Container setup modules need lenient type checking
[[tool.mypy.overrides]]
module = [
    "src.app.setup",
    "src.app.container",
    "src.app.events",
]
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gui: marks tests as GUI tests (requires display)",
    "network: marks tests that require network access",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
